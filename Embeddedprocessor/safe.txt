#include <mega128.h>
#include <delay.h>
#include "lcd.h"

#define FND_Null        17
#define FND_Star        14
#define FND_Sharp       15

#define Do 1908 // 262Hz (3817us) 1908us 
#define Mi 1515 // 330Hz (3030us) 1515us 
#define Sol 1275 // 370Hz (2703us) 1351us 
#define HDo 956 // 높은 도 

unsigned char setlcd[] = "    KPU Safe";           //초기 화면
unsigned char openlcd[] = " Open  KPU Safe";      //오픈되었다는 화면 
unsigned char closelcd[] = "Close KPU Safe";      // 닫혔다는 화면 
unsigned char errorlcd[] = "---- Error! ----";     //에러 화면  
unsigned char spw[] = " Set Password";            //비밀번호 세팅 화면 
unsigned char mp[] = " Set M-Password";           //관리자 비밀번호 세팅 화면 
unsigned char savemp[] = "Save M-Password!";      //관리자 비밀번호 저장 화면 
unsigned char ermp[] = " Plz M-Password";         //관리자 비밀번호 입력받는 화면 
unsigned char reopen[] = "Re-open KPU Safe";      //금고 다시 열렸다는 화면 (에러두번 후) 
unsigned char Secret[10];  

unsigned char password[4];     // 초기 비번 저장하는 배열    (키값을 아스키코드로 변경 후)
unsigned char inpw[4];       // 비밀번호 입력후 저장하는 배열 (키값을 아스키코드로 변경 후)
unsigned char m_pw[10];      // 초기 관리자 비밀번호 저장하는 배열 (키값을 아스키코드로 변경 후)
unsigned char re_pw[10];      // 에러두번났을때 관리자 비밀번호입력후 저장하는 배열   (키값을 아스키코드로 변경 후)

unsigned int pw1, pw2, pw3, pw4;           // 초기 4자리 비밀번호  저장 하는 곳(키값을 다시 integer로 변경후 )
unsigned int R_pw1, R_pw2, R_pw3, R_pw4;       //R_pw -> 4자리 비밀번호 맞추기위해 입력한거 저장하는 곳(키값을 다시 integer로 변경후 )
unsigned int er_pw1,er_pw2, er_pw3,er_pw4,er_pw5,er_pw6,er_pw7,er_pw8,er_pw9, er_pw10;  // 에러났을때 관리자비밀번호 입력해서 저장하는 곳 (키값을 다시 integer로 변경후 )
unsigned int s_m1,s_m2,s_m3,s_m4,s_m5,s_m6,s_m7,s_m8,s_m9,s_m10;  // 초기 관리자 비밀번호 저장하는 곳 (키값을 다시 integer로 변경후 )
   
unsigned char mn_pw, keymn_pw;   // 관리자비밀번호 설정하는 함수 키스캔과 키값 
unsigned char key, keynum;      //  초기 비밀번호 4자리 설정하는 함수  키스캔과 키값 
unsigned char errpw, keyer_pw;   // 에러두번났을때 관리자비밀번호 맞추는 함수  키스캔과 키값 
unsigned char key_pw, keynum_pw;  // 비밀번호 4자리 맞추는 함수  키스캔과 키값 
unsigned char mode, Akey;      // main함수에서 키스캔 

unsigned int z=0, t=0; //관리자비밀번호 함수 ( I_mnpw )에서 쓰인 변수
unsigned int i=0, j=0; //초기비밀번호 세팅함수 (Setpw) 에서 쓰인 변수 
unsigned int w=0, p=0;  //에러두번나서 관리자비밀번호 입력받는 함수(er_pw)에서 쓰인 변수 
unsigned int k=0, u=0; // 비밀번호 맞추는 함수 (In_pw)에서 쓰인 변수
unsigned int n=0; // 에러두번나서 4자리비밀번호 초기화할때 쓰인 변수 

unsigned int errorcnt = 0; //에러횟수세는 카운트 


void Init(void)         //포트 
{
    DDRB = 0xff;            
    DDRC = 0x0f;            // 상위 4bit Col(입력), 하위 4bit Row(출력)
    PORTC = 0x0f;
    DDRG |= (1<<4);

      
}


void myDelay_us(unsigned int delay)       //부저구동을 위한 delay함수 
{
    int i;
    for(i=0 ; i<delay; i++)
    {
        delay_us(1);
    }
}

void SSound(int time)          //음계가 같은 시간동안 울리도록 하는 함수 
{
    int i, tim;
    tim = 50000/time;
    for(i=0 ; i<tim ; i++)  
    {
        PORTG |= 1<<PORTG4;   //부저 ON
        myDelay_us(time);
        PORTG &= ~(1<<PORTG4);   //부저 OFF
        myDelay_us(time);
    }
}               

unsigned char KeyScan(void)                     // 4X4 키패드 스캔 함수, 출력 값은 10진수 1~16  {
{
    unsigned int Key_Scan_Line_Sel = 0xf7;      // Init_data 하위 니블의 출력을 결정  
                                                        // 하위 니블(4bit)을 스위칭(연속적으로 돌아가면서)하면서 출력    
    unsigned char Key_Scan_sel=0, key_scan_num=0;         
    unsigned char Get_Key_Data=0;                                   // 실제 키 데이터        
      
    //키스캔 부분  
    for(Key_Scan_sel=0; Key_Scan_sel<4; Key_Scan_sel++)     
    {           
          // 초기화 
          PORTC = Key_Scan_Line_Sel;            
          delay_us(10);                                
            
          //수신 부분
          Get_Key_Data = (PINC & 0xf0);   // 74LS14의 데이터 취득      
            
          if(Get_Key_Data != 0x00)
          {                  
                switch(Get_Key_Data)        // C포트 내용의 상위 니블(4bit)만 받음            
                {
                      case 0x10:            // 0001이 맞으면 현재 count값에 4를 곱한후                                        
                                            //  1을 더하고 key_scan_num변수에 저장
                            key_scan_num = Key_Scan_sel*4 + 1;                
                            break;                
                      case 0x20:            // 0010이 맞으면 현재 count값에 4를 곱한후
                                            //  2를 더하고 key_scan_num변수에 저장
                            key_scan_num = Key_Scan_sel*4 + 2;                
                            break;                
                      case 0x40:            // 0100이 맞으면 현재 count값에 4를 곱한후 
                                            //  3를 더하고 key_scan_num변수에 저장           
                            key_scan_num = Key_Scan_sel*4 + 3;                
                            break;                
                      case 0x80:            // 1000이 맞으면 현재 count값에 4를 곱한후                                                      
                                            //  4를 더하고 key_scan_num변수에 저장                                         
                            key_scan_num = Key_Scan_sel*4 + 4;                 
                            break;
                      default :
                            key_scan_num = FND_Null; 
                            break;                
                }           
                return key_scan_num;       
          }               
          Key_Scan_Line_Sel = (Key_Scan_Line_Sel>>1);
        //Init_data를 시프트 함, Key_Scan_Line 이동     
    } 
    return key_scan_num;      
}

void I_mnpw()     // 관리자 비밀번호 입력함수 
{  
    for(z = 0; z<= 9 ; z++)
    {
        m_pw[z] = 0;           // 배열 초기화  
    }
    
    t=0;                      // 키스캔 후 아스키코드로 변환 후 배열에 저장할 때 쓰이는 변수 m_pw[t]
    LCD_Str(mp);              // LCD출력
    delay_ms(1500);           // LCD출력 띄우기 1.5초
    LCD_Clear();               // LCD 화면클리어 
    delay_ms(10);
                    
    while(1)                  //키스캔후 비밀번호 저장하는 반복문 
    {   
        mn_pw = KeyScan();     //키스캔            //    1(1)  2(2)  3(3)  4(M1)
        if(mn_pw)                                   //    5(4)  6(5)  7(6)  8(M2)
        {                                            //    9(7) 10(8) 11(9) 12(M3)
            if(mn_pw == 1)//1                  //   13(*) 14(0) 15(#) 16(M4) 받는 값 (실제버튼)
            {
                keymn_pw = 1;
            }
            if(mn_pw == 2)     //2
            {
                keymn_pw = 2;
            }
            if(mn_pw == 3)     //3
            {
                keymn_pw = 3;
            }   
            if(mn_pw == 4)    //M1
            {
                keymn_pw = 17;   // A 
            }
            if(mn_pw == 5)     //4
            {
                keymn_pw = 4;
            }
            if(mn_pw == 6)     //5
            {
                keymn_pw = 5;
            }
            if(mn_pw == 7)     //6
            {
                keymn_pw = 6;
            }
            if(mn_pw == 8)     //M2      
            {                        
                keymn_pw = 18;   //B 
            }
            if(mn_pw == 9)      //7
            {
                keymn_pw = 7;
            }
            if(mn_pw == 10)     //8
            {            
                keymn_pw = 8;
            }
            if(mn_pw == 11)    //9
            {
                keymn_pw = 9;
            }
            if(mn_pw == 12)    //M3
            {
                keymn_pw = 19;    //C 
            }
            if(mn_pw == 13)     //*
            {
                keymn_pw = -6;  
            }
            if(mn_pw == 14)    // 0이 안나오기때문에 키값 14를 integer 0으로지정 
            {
                keymn_pw = 0;
            }
            if(mn_pw == 15)   //#
            {
                keymn_pw = -13; 
            }
            if(mn_pw == 16)  //M4
            {               
                break;    
            }
            
                    
            m_pw[t] = (keymn_pw + 0x30);  //시간설정 배열에 키값을 아스키코드로 저장한다   ex) 내가 A를 출력하고 싶다면 아스키코드문자 A는 65니까 65 = keymn_pw + 48(0x30 = '0') -> keymn_pw = 17
            Secret[t] = ((-6) + 0x30);    // LCD출력할때 비밀번호 가리기위해 Secret[t]에 *를 아스키코드로 저장 
            LCD_Char(Secret[t]);          // LCD에 *를 출력 
            delay_ms(500);            
                             
            if(t != 9)                 //반복 
            {
                t++;
            }
            else if(t == 9)            //10개 비밀번호를  다적으면 
            {
            
                LCD_Clear();          //화면 클리어 
                delay_ms(10);
                LCD_Str(savemp);     //저장되었다는 문구 출력 
                delay_ms(1500);
                LCD_Clear();         //화면 클리어 
                delay_ms(10);
                LCD_Str(setlcd);     //LCD 초기화면 출력 
                               
                s_m1  = (m_pw[0]-0x30);
                s_m2  = (m_pw[1]-0x30);
                s_m3  = (m_pw[2]-0x30);
                s_m4  = (m_pw[3]-0x30);  // 배열을 다시 integer로 변환후 s_m에 저장 
                s_m5  = (m_pw[4]-0x30);
                s_m6  = (m_pw[5]-0x30);
                s_m7  = (m_pw[6]-0x30);
                s_m8  = (m_pw[7]-0x30);
                s_m9  = (m_pw[8]-0x30);
                s_m10 = (m_pw[9]-0x30);
                break;                
                
            }
        }
    }
}
   

void Setpw(void)                 // 비밀번호 설정하기 4자리 
{
   
    for(i=0; i <= 3; i++)            //배열 초기화 
    {
        password[i] = 0;
    }
    
    j = 0;                       // 키스캔후 아스키코드변환후 비밀번호를 저장하기위해 쓰이는 변수 password[j]
    LCD_Clear();     // 화면 클리어
    delay_ms(10);
    LCD_Str(spw);    // 비밀번호세팅문구  출력 
    delay_ms(2000);    // 2초 
    LCD_Clear();     //화면클리어 
    delay_ms(10);
    while(1)
    {   
        key = KeyScan();         // 키스캔 
        if(key)
        {
            if(key == 1)       // 1                //    1(1)  2(2)  3(3)  4(M1)                                                                                //    5(4)  6(5)  7(6)  8(M2)
            {                                   //    9(7) 10(8) 11(9) 12(M3)                                                                    //   13(*) 14(0) 15(#) 16(M4) 받는 값 (실제버튼)
                keynum = 1;                                                                
            }                                                                              
            if(key == 2)       // 2
            {
                keynum = 2;
            }
            if(key == 3)       // 3
            {
                keynum = 3;
            }   
            if(key == 4)      //M1
            {
                keynum = 17;   // A 
            }
            if(key == 5)      // 4
            {
                keynum = 4;
            }
            if(key == 6)     // 5
            {
                keynum = 5;
            }
            if(key == 7)     // 6
            {
                keynum = 6;
            }
            if(key == 8)     // M2      
            {                        
                keynum = 18;  //B
            }
            if(key == 9)     // 7
            {
                keynum = 7;
            }
            if(key == 10)    // 8
            {            
                keynum = 8;
            }
            if(key == 11)    // 9
            {
                keynum = 9;
            }
            if(key == 12)    //M3
            {
                keynum = 19;     // C
            }
            if(key == 13)
            {
                keynum = -6;       // * 
            }
            if(key == 14)        // 0이 안나오기때문에 키값 14를 integer 0으로지정 
            {
                keynum = 0;
            }
            if(key == 15)
            {
                keynum = -13;    // #
            }
            if(key == 16)      //M4
            {               
                break;
            }
            
            password[j] = (keynum + 0x30);  // 배열에 키값을 아스키코드로 저장한다
            Secret[j] = ((-6) + 0x30);     //비밀번호를 가리기 위해 Secret[j]에 *를 아스키코드로 저장 
            LCD_Char(Secret[j]);       // 출력 
            delay_ms(500);
             
            if(j != 3)                 //반복 
            {
                j++;
            }
            
            else if(j == 3)            //비밀번호 4자리 적으면 
            {                                       
                LCD_Clear();     //화면 클리어  
                delay_ms(10);
                
                LCD_Str(closelcd);   //Close문구 출력  
                delay_ms(1500);      // 1.5초 
                SSound(Mi);          //닫히는 알림음 
                SSound(Do);

                
                R_pw1 = (password[0]-0x30);
                R_pw2 = (password[1]-0x30);
                R_pw3 = (password[2]-0x30);
                R_pw4 = (password[3]-0x30);        //배열을 다시 integer로 변환후 R_pw에 저장 
                                 
                break;                                                           
            }                                                               
        }
    }   
}

void er_pw()           // 에러 두번 났을때 관리자비밀번호 치고 닫힘 여는 함수 
{
    pw1 = 0;           // 에러가 났으니 원래 저장되어있던 4자리 비밀번호 초기화 
    pw2 = 0;
    pw3 = 0;
    pw4 = 0;
    
    for(n=0;n<=3;n++)     //4자리 비밀번호배열  초기화 
    {
        password[n] = 0;
    }
    
    errorcnt = 0;       //에러카운트 다시 0
       
    for(w = 0; w<= 9 ; w++)  //에러나서 받을 관리자비밀번호 배열 초기화 
    {
        re_pw[w] = 0;
    }
    p=0;                   //키스캔 후 아스키코드 변환 후 배열에 저장할때 쓰이는 변수 re_pw[p]
    LCD_Clear();            //화면 클리어 
    delay_ms(10);
    LCD_Str(ermp);        //에러문구 출력 
    delay_ms(1500);
    LCD_Clear();          //화면 클리어 
    delay_ms(10);
                    
    while(1)
    {      
        errpw = KeyScan();     //키스캔 
        if(errpw)
        {
            if(errpw == 1)     // 1           //    1(1)  2(2)  3(3)  4(M1)
            {                                 //    5(4)  6(5)  7(6)  8(M2)
                keyer_pw = 1;               //    9(7) 10(8) 11(9) 12(M3)
            }                                //   13(*) 14(0) 15(#) 16(M4)   받는 값 (실제버튼)
            if(errpw == 2)    // 2
            {
                keyer_pw = 2;
            }
            if(errpw == 3)     // 3
            {
                keyer_pw = 3;
            }   
            if(errpw == 4)    //M1
            {
                keyer_pw = 17;   // A
            }
            if(errpw == 5)     // 4
            {
                keyer_pw = 4;
            }
            if(errpw == 6)     // 5
            {
                keyer_pw = 5;
            }
            if(errpw == 7)     // 6
            {
                keyer_pw = 6;
            }
            if(errpw == 8)    //M2       
            {                       
                keyer_pw = 18;    //B
            }
            if(errpw == 9)    // 7
            {
                keyer_pw = 7;
            }
            if(errpw == 10)   // 8
            {            
                keyer_pw = 8;
            }
            if(errpw == 11)   // 9
            {
                keyer_pw = 9;
            }
            if(errpw == 12)   //M3
            {
                keyer_pw = 19;       //C 
            }
            if(errpw == 13)
            {
                keyer_pw = -6;       // * 
            }
            if(errpw == 14)   // 0이 안나오기때문에 키값 14를 integer 0으로지정 
            {
                keyer_pw = 0;
            }
            if(errpw == 15)
            {
                keyer_pw = -13;   // #
            }
            if(errpw == 16)     //M4
            {               
                break;
            }
            
                    
            re_pw[p] = (keyer_pw + 0x30);  //배열에 키값을 아스키코드로 저장한다 
            Secret[p] = ((-6) + 0x30);    //비밀번호를 가리기 위해 Secret[p]에 *를 아스키코드로 저장 
            LCD_Char(Secret[p]);         //출력 
            delay_ms(500);   
                             
            if(p != 9)                 //반복 
            {
                p++;
            }
            else if(p == 9)            //관리자비밀번호 10자리를 다 다적으면 
            {                                       
                er_pw1  = (re_pw[0]-0x30);
                er_pw2  = (re_pw[1]-0x30);
                er_pw3  = (re_pw[2]-0x30);
                er_pw4  = (re_pw[3]-0x30);        //배열을 다시 integer로 변환후 er_pw에 저장 
                er_pw5  = (re_pw[4]-0x30);
                er_pw6  = (re_pw[5]-0x30);
                er_pw7  = (re_pw[6]-0x30);
                er_pw8  = (re_pw[7]-0x30);
                er_pw9  = (re_pw[8]-0x30);
                er_pw10 = (re_pw[9]-0x30);
                                
                if((s_m1 == er_pw1) && (s_m2 == er_pw2) && (s_m3 == er_pw3) && (s_m4 == er_pw4) && (s_m5 == er_pw5) && (s_m6 == er_pw6) && (s_m7 == er_pw7) && (s_m8 == er_pw8) && (s_m9 == er_pw9) && (s_m10 == er_pw10))
                {   // 에러두번나서 입력받은 관리자비밀번호랑 초기에 입력해서 저장시켜놓은 관리자 비밀번호가 같다면 
                   LCD_Clear();       //화면클리어 
                   delay_ms(10);
                  
                   LCD_Str(reopen);    //금고재오픈문구  출력 
                   delay_ms(1500);      // 1.5초 
                   
                   SSound(Sol);        //재오픈 알림음 
                   SSound(HDo);
                   
                   LCD_Clear();    // 화면클리어 
                   delay_ms(10);
                   Setpw();                      
                }
                                     
                else if((s_m1 != er_pw1) || (s_m2 != er_pw2) || (s_m3 != er_pw3) || (s_m4 != er_pw4) || (s_m5 != er_pw5) || (s_m6 != er_pw6) || (s_m7 != er_pw7) || (s_m8 != er_pw8) || (s_m9 != er_pw9) || (s_m10 != er_pw10))    
                {  // 에러두번나서 입력받은 관리자비밀번호랑 초기에 입력해서 저장시켜놓은 관리자 비밀번호가 다르다면 
                    LCD_Clear();     //화면클리어  
                    delay_ms(10);
                    
                    LCD_Str(errorlcd);   //에러문구 출력  
                    delay_ms(1500);     // 1.5초 
                                        
                    SSound(HDo);       //에러 알림음 
                    break;                        
                }
            } 
        }                     
    }
}                           

void In_pw()        //비밀번호 4자리 입력 
{
    for(k = 0; k<=3 ; k++)   //배열초기화 
    {
        inpw[k] = 0;
    }
    
    u=0;          // 입력받은 번호를 배열에 저장할때 쓰이는 변수 inpw[u]
    LCD_Init();    // 화면 초기화 
    delay_ms(10);

    LCD_Clear();  //화면클리어 
    delay_ms(10);
    while(1)
    {   
        key_pw = KeyScan();   //키스캔 
        if(key_pw)                      //    1(1)  2(2)  3(3)  4(M1)
        {                              //    5(4)  6(5)  7(6)  8(M2)         
            if(key_pw == 1) // 1      //    9(7) 10(8) 11(9) 12(M3)                           
            {                         //   13(*) 14(0) 15(#) 16(M4) 받는 값 (실제버튼)                                                    
                keynum_pw = 1;                 
            }
            if(key_pw == 2)   // 2
            {
                keynum_pw = 2;
            }
            if(key_pw == 3)    // 4
            {
                keynum_pw = 3;
            }   
            if(key_pw == 4)   //M1
            {
                keynum_pw = 17;   // A 
            }
            if(key_pw == 5)   // 4
            {
                keynum_pw = 4;
            }
            if(key_pw == 6)     // 5
            {
                keynum_pw = 5;
            }
            if(key_pw == 7)     // 6
            {
                keynum_pw = 6;
            }
            if(key_pw == 8)     // M2      
            {                        //B 
                keynum_pw = 18;
            }
            if(key_pw == 9)     // 7
            {
                keynum_pw = 7;
            }
            if(key_pw == 10)   // 8
            {            
                keynum_pw = 8;
            }
            if(key_pw == 11)   // 9
            {
                keynum_pw = 9;
            }
            if(key_pw == 12)   //M3
            {
                keynum_pw = 19;       //C
            }
            if(key_pw == 13)
            {
                keynum_pw = -6;       // * 
            }
            if(key_pw == 14)    // 0이 안나오기때문에 키값 14를 integer 0으로지정 
            {
                keynum_pw = 0;
            }
            if(key_pw == 15)
            {
                keynum_pw = -13;   // #
            }
            if(key_pw == 16)     //m4
            {               
                break;
            }
    
            inpw[u] = (keynum_pw + 0x30);  //배열에 키값을 아스키코드로 저장한다 
            Secret[u] = ((-6) + 0x30);     //비밀번호를 가리기 위해 Secret[u]에 *를 아스키코드로 저 장 
            LCD_Char(Secret[u]);          // * 를 출력
            delay_ms(500);
                 
            if(u != 3)                 //반복 
            {
                u++;
            }
            else if(u == 3)            //비밀번호 입력이 다되면 
            {                                          
                pw1 = (inpw[0]-0x30);
                pw2 = (inpw[1]-0x30);
                pw3 = (inpw[2]-0x30);
                pw4 = (inpw[3]-0x30);        // 배열을 다시 integer로 변환후 pw에 저장 
                
                if((pw1 == R_pw1) && (pw2 == R_pw2) && (pw3 == R_pw3) && (pw4 == R_pw4))    // 입력받은 4자리 비밀번호랑 세팅해서 저장시켜놓은 4자리 비밀번호가 같다면 
                {
                    errorcnt = 0; // 에러카운트 다시 0 
                    LCD_Clear();     //화면클리어  
                    delay_ms(10);
                    
                    LCD_Str(openlcd);   //오픈문구 출력 
                    delay_ms(1500);    // 1.5초 
                        
                    SSound(Do);       //오픈알림음 
                    SSound(Mi);
                    SSound(Sol);
                    SSound(HDo);
                        
                    break;
                }
                    
                else if((pw1 != R_pw1) || (pw2 != R_pw2) || (pw3 != R_pw3) || (pw4 == R_pw4)) // 입력받은 4자리비밀번호랑 세팅해서 저장시켜놓은 4자리비밀번호가 다르다면 
                {                                                              
                    errorcnt++;
                    LCD_Clear();     //화면클리어  
                    delay_ms(10);
                    
                    LCD_Str(errorlcd);   //에러문구 출력  
                    delay_ms(1500);      // 1.5  초 
                    SSound(HDo);       //에러알림음                       
                }                       
                else;
                                                                                        
                if(errorcnt == 2)  //에러카운트가 2라면 
                {
                    er_pw();    //  er_pw함수 실행 
                }
                                           
            }                              
        }
    }
}              
                                            
void main()      // 메인함수 
{
    Init();      // 포트 

    LCD_Init();    // LCD초기화 
    I_mnpw();       // I_mnpw함수 실행 
    delay_ms(50);

    while(1)
    {
        Akey = KeyScan();  //키스캔 
        mode = Akey;
        if(mode == 4)      // mode가 4라면 (M1이 눌리면)
        {
            mode = 0;       // mode는 다시 0
            Setpw();       //Setpw함수 실행 
        }
                        
        else if(mode)     // mode가 1이라면 (버튼이 아무거나 눌리면)
        {
            mode = 0;     // mode는 다시 0
            In_pw();     // In_pw함수실행 
        }
   
    }
}                       