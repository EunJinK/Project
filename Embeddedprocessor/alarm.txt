#include <mega128.h>
#include <delay.h>
#include "lcd.h";

        

#define FND_data PORTB
#define FND_dig PORTE

#define FND_Null        17
#define FND_Star        14
#define FND_Sharp       15

#define     Do      1908      //음계에 따른 시간설정
#define     Re      1700
#define     Mi      1515
#define     Fa      1432
#define     Sol     1275
#define     Ra      1136
#define     Si      1012


unsigned char mode,key_Num=0;   //메인함수 키스캔 키값                         
unsigned char k, t_key, t_keynum, alarm_key, alarm_keynum; // 시간설정 키값 , 알람함수 키값 
unsigned char sec=0,min=0,hour,day,month; // 초 분 시 일 월 
unsigned int i,j,cnt,year;  //배열 변수,년, 카운트 
unsigned char first[] = "2019-06-18";           //초기화면 
unsigned char second[] = "AM 12:00:00";   
unsigned char AM[] = "AM";
unsigned char PM[] = "PM";
unsigned char str[] = "Key Setting!!";           //시간 세팅화면 
unsigned char str2[] = "---Insert Key---";      //입력~! 
unsigned char str3[] = "alarm set mode!!";      //알람 세팅 모드 화면 
unsigned char str4[] = "--Insert alarm--";      //알람 입력 
unsigned char str5[] = "     CLEAR!     ";      //클리어 화면 
unsigned char alarm[3][10];                     //10자리 2차원배열 알람 설정한 값 넣는곳 
unsigned char str7[] = "Setting Complete!";    //세팅 완료 화면 
unsigned char time[14];                         //여기에 시간 세팅한 값 들어옴.
bit timer_flag;     //타이머 
bit dir,flag_chattering; //m3 AM-PM변환시 사용    
bit buzzer_flag; //부저 

unsigned char alarm_month1,alarm_month2,alarm_month3,alarm_day1,alarm_day2,alarm_day3,alarm_hour1,alarm_hour2,alarm_hour3; //알람 설정 시 저장되는 달 일 시 
unsigned char alarm_min1,alarm_min2,alarm_min3,alarm_sec1,alarm_sec2,alarm_sec3; // 알람 설정시 저장되는 분 초 

interrupt [EXT_INT0] void ext_int0(void)
{
    buzzer_flag = 0;                      //인터럽발생시 부저멈춤 
    LCD_Clear();
    delay_ms(100);
}    

void Init(void)
{
    EIMSK = 0x01;         //외부 인터럽트 종류 선택 0000 0001
    EICRA = 0x02;         //INT0 핀의 하강 에지에서 비동기적으로 인터럽트 요청 0000 0010 
    DDRB = 0xff;          //포트B를 출력으로 설정   
    DDRC = 0x0f;            // 상위 4bit Col(입력), 하위 4bit Row(출력)
    PORTC = 0x0f;
    DDRG |= (1<<4);
    DDRD = 0x00;                 
    SREG |= 0x80;        //모든 인터럽트 허가 
}
void Init_timer(void)                                                
{
    TIMSK = (1<<TOIE0);    //오버플로우(TOV0) 인터럽트 선택 
    TCCR0 = (1<<CS02)|(1<<CS01)|(1<<CS00); //1024분주 타이머카운터 0
    TCNT0 = -5; 
    SREG |= 0x80;         //인터럽트 동작 시작 
}

interrupt [TIM0_OVF] void timer0_overflow(void)
{
    TCNT0 = -5;              //카운터값재설정                  
    if(timer_flag == 0) cnt++;   // timer_flag가 0이면 cnt를 센다.
    
    if(cnt == 2881)            //시계설정 1초마다 sec 1씩증가
    {
        sec++;
        cnt = 0;
    }
    if(sec == 60)            //sec가 60이 되면 -> 60초 = 1분 
    {
        sec = 0;
        min++;
    }
    if(min == 60)       //min이 60이 되면 -> 60분 = 1시간 
    {
        min = 0; hour++;
    }
    if(hour == 24)     //hours이 24시간이 되면 -> 24시간 = 하루 
    {
        hour = 0; day++;
    }
}

void myDelay_us(unsigned int delay)     //부저 구동하기위한 delay함수 
{
    int i;
    for(i=0; i<delay; i++)
    {
        delay_us(1);
    }
}

void SSound(int time)                  //음계 출력 함수 
{
    int i, tim;
    tim = 50000/time;
    for(i=0; i<tim; i++) // 음계마다 같은 시간 동안 울리도록 time 변수 사용
    {
        PORTG |= 1<<PORTG4; //부저ON, PORTG의 4번 핀 ON(out 1)
        myDelay_us(time);
        PORTG &= ~(1<<PORTG4);  //부저OFF, PORTG의 4번 핀 OFF(out 0)
        myDelay_us(time);
    }
}

unsigned char KeyScan(void)                     // 4X4 키패드 스캔 함수, 출력 값은 10진수 1~16  {
{
    unsigned int Key_Scan_Line_Sel = 0xf7;      // Init_data 하위 니블의 출력을 결정  
    // 하위 니블(4bit)을 스위칭(연속적으로 돌아가면서)하면서 출력    
    unsigned char Key_Scan_sel=0, key_scan_num=0;         
    unsigned char Get_Key_Data=0;            // 실제 키 데이터        
      
    //키스캔 부분  
    for(Key_Scan_sel=0; Key_Scan_sel<4; Key_Scan_sel++)     
    {           
          // 초기화 
          PORTC = Key_Scan_Line_Sel;            
          delay_us(10);                                
            
          //수신 부분
          Get_Key_Data = (PINC & 0xf0);   // 74LS14의 데이터 취득      
            
          if(Get_Key_Data != 0x00)
          {                  
                switch(Get_Key_Data)        // C포트 내용의 상위 니블(4bit)만 받음            
                {
                      case 0x10:            // 0001이 맞으면 현재 count값에 4를 곱한후                                        
                                            //  1을 더하고 key_scan_num변수에 저장
                            key_scan_num = Key_Scan_sel*4 + 1;                
                            break;                
                      case 0x20:            // 0010이 맞으면 현재 count값에 4를 곱한후
                                            //  2를 더하고 key_scan_num변수에 저장
                            key_scan_num = Key_Scan_sel*4 + 2;                
                            break;                
                      case 0x40:            // 0100이 맞으면 현재 count값에 4를 곱한후 
                                            //  3를 더하고 key_scan_num변수에 저장           
                            key_scan_num = Key_Scan_sel*4 + 3;                
                            break;                
                      case 0x80:            // 1000이 맞으면 현재 count값에 4를 곱한후                                                      
                                            //  4를 더하고 key_scan_num변수에 저장                                         
                            key_scan_num = Key_Scan_sel*4 + 4;                 
                            break;
                      default :
                            key_scan_num = FND_Null; 
                            break;                
                }           
                return key_scan_num;       
          }               
          Key_Scan_Line_Sel = (Key_Scan_Line_Sel>>1);
        //Init_data를 시프트 함, Key_Scan_Line 이동     
    } 
    return key_scan_num;      
}
void time_set(void)                 //현재시간 설정 함수 
{
   
    for(k=0; k<=13; k++)            //배열 초기화 
    {
        time[k] = 0;
    }
    i = 0;               //시간입력후 저장할 배열에 쓰이는 변수 time[i] 
    LCD_Pos(0,5);        //LCD위치 6, 라인 1지정 
    LCD_Char('-');
                  
    LCD_Pos(0,8);       //LCD위치 9, 라인 1지정 
    LCD_Char('-');
    
    LCD_Pos(1,6);      //LCD위치 7, 라인 2지정 
    LCD_Char(':');
    
    LCD_Pos(1,9);      //LCD위치 10, 라인 2지정 
    LCD_Char(':');
    LCD_Pos(0,1);     //LCD위치 2, 라인 1지정 
    
    while(1)
    {   
        t_key = KeyScan();     //키스캔받은 값을 key에 저장 
        if(t_key)
        {   
            if(t_key == 16)             //m4누를시 처음화면으로 돌아감
            {
                timer_flag = 0;       //timer_flag를 0으로 한다. 
                break;
            }
            if(t_key == 14)             // 0이 안나오기때문에 키값 14를 integer 0으로지정 
            {
                t_keynum = 0;
            }
            else if(t_key%4 != 0)       //키를 3*4 형식으로 변환한다 
            {
                t_keynum = (t_key/4)*3+(t_key%4);
            }
            else
            {
                t_keynum = (t_key/4)+9;
            }
            
            time[i] = (t_keynum + 0x30);  //시간설정 배열에 키값을 아스키코드로 저장한다 
            LCD_Char(time[i]);          //키값 출력
            delay_ms(500);
             
            if(i != 13)                 //반복 
            {
                i++;
            }
            else if(i == 13)            //14개 숫자를(년 월 일 시간 분 초) 다적으면 
            {                           //세팅완료 -> 초기화면 
                timer_flag = 0;  //timer_flag = 0 -> 시간세기 시작 
                LCD_Clear();     //입력 다하면 clear시키고 setting complete! 띄우기 
                delay_ms(10);
                LCD_Pos(0,0);
                LCD_Str(str7);   //하고 배열 14개 값들 timer_intr 에서 시계구동. 
                delay_ms(1500);
                LCD_Clear();
                delay_ms(50);
                
                year  = ((time[0]-0x30)*1000)+((time[1]-0x30)*100)+((time[2]-0x30)*10)+(time[3]-0x30);
                //timer[i]-0x30-> 다시 integer로 변환하는 과정, ex)2*1000+0*100+1*10+9 = 2019 = year
                month = ((time[4]-0x30)*10) + (time[5]-0x30);
                day   = ((time[6]-0x30)*10) + (time[7]-0x30);
                hour  = ((time[8]-0x30)*10) + (time[9]-0x30);        // time안의 배열을 다시 integer로 변환후
                min   = ((time[10]-0x30)*10) + (time[11]-0x30);      // 변수들에 저장
                sec   = ((time[12]-0x30)*10) + (time[13]-0x30);                
                break;                
                                            
            }                                                        //숫자입력할때마다 포스값 변경 
            if(i == 4) LCD_Pos(0,6);  //i가 4라면 -> 년 입력후 달로 넘어갈때 LCD위치 7, 라인 1지정 
            if(i == 6)  LCD_Pos(0,9); //달 입력후 일로 넘어갈때 LCD위치 10, 라인 1지정  
            if(i == 8)  LCD_Pos(1,4);// 일 입력후 시간hour로 넘어갈때 LCD위치 5, 라인 2지정 
            if(i == 10)  LCD_Pos(1,7); //hour입력후 min으로 넘어갈때 LCD위치 8, 라인 2지정 
            if(i == 12)  LCD_Pos(1,10);  //min입력후 sec으로 넘어갈때 LCD위치 11, 라인 2지정            
        }
    }   
}

void alarm_set(void)      //알람 설정 (3개)하는 함수 
{
    for(j=0;j<3;j++)           //초기화 
    {   
        for(k=0;k<10;k++)
        {
            alarm[j][k] = 0;
        }
    }
    i = j = 0;       //알람입력받은 후 배열에 저장할때 쓰이는 변수 alarm[i][j] 
    
    LCD_Pos(0,6);   //LCD위치 7, 라인 1지정 
    while(1)
    {   
            if(j == 0)     //한번도 안눌렀을때 년도와 ':' 같은것들 출력하기위해 
           {
                LCD_Pos(0,1);
                LCD_Char((year/1000)+'0');  //year/1000 = 인티저 에다가 '0'을 하면 아스키코드로 바뀜 2019/1000 = 2.019 
                LCD_Char(((year%1000)-(year%100))/100+'0');  //
                LCD_Char(((year%100)-(year%10))/10+'0');
                LCD_Char((year%10)+'0'); 
                
                LCD_Pos(0,5);
                LCD_Char('-');
                  
                LCD_Pos(0,8);
                LCD_Char('-');  
                LCD_Pos(1,6);
                LCD_Char(':');
                LCD_Pos(1,9);
                LCD_Char(':');
                LCD_Pos(0,6);
            }                  
        alarm_key = KeyScan();               //키값 받고 
        if(alarm_key)                        //키가 눌리면 
        {    
            if(alarm_key == 16)              //m4 = 초기화면 
            {
                break;
            }
            if(alarm_key == 14)              // 0이 안나오기때문에 키값 14를 integer 0으로지정
            {
                alarm_keynum = 0;
            }
            else if(alarm_key%4 != 0)        //3*4 키변환 
            {
                alarm_keynum = (alarm_key/4)*3+(alarm_key%4);
            }
            else
            {
                alarm_keynum = (alarm_key/4)+9;
            }   
                                  
            alarm[i][j] = (alarm_keynum+0x30);   //2차원 배열 3개에 반복해서 알람시간을 아스키코드로 넣는다 
            LCD_Char(alarm[i][j]);    //LCD표현 
            delay_ms(500);
            
            if(j != 10)      //반복 
            {
                j++;
            } 
            
            if(j == 10)    //10개씩(달 일 시간 분 초)입력이끝나면 clear!후 다시반복 
            {      
                i++;          //10개 입력이 완료되면 (알람 1개설정완료 -> 2번째 알람설정하기위해) i 카운트 
                j=0;        //j는 다시 달 일 시간 분 초를 입력받기위해 0초기화 
                LCD_Clear();
                delay_ms(10);
                LCD_Str(str5);   //알람 설정이 되었다는 클리어 화면 출력 
                delay_ms(1000);
                LCD_Clear();
                delay_ms(10);
                LCD_Pos(0,6);   //LCD 위치 7, 라인 1 지정 
                delay_ms(50);                    
            }
            if(j == 2)  LCD_Pos(0,9);     //LCD 위치 10, 라인 1 지정 
            else if(j == 4)  LCD_Pos(1,4); //LCD 위치 5, 라인 2 지정
            else if(j == 6)  LCD_Pos(1,7); //LCD 위치 8, 라인 2 지정
            else if(j == 8)  LCD_Pos(1,10);  //LCD 위치 11, 라인 2 지정         
            
            if(i == 3)  break;     //배열 3개 입력끝날시(총 알람 3개설정 완료)초기화면으로 
        }
        alarm_month1 = ((alarm[0][0]-0x30)*10) + (alarm[0][1]-0x30);   //알람 설정에 넣었던 아스키코드를 인티저로 변환후
        alarm_day1 = ((alarm[0][2]-0x30)*10) + (alarm[0][3]-0x30);     //현재시간과 비교하기위해 새로운 변수에 넣는다. 
        alarm_hour1 = ((alarm[0][4]-0x30)*10) + (alarm[0][5]-0x30); 
        alarm_min1 = ((alarm[0][6]-0x30)*10) + (alarm[0][7]-0x30); 
        alarm_sec1 = ((alarm[0][8]-0x30)*10) + (alarm[0][8]-0x30); 
        
        alarm_month2 = ((alarm[1][0]-0x30)*10) + (alarm[1][1]-0x30);
        alarm_day2 = ((alarm[1][2]-0x30)*10) + (alarm[1][3]-0x30);
        alarm_hour2 = ((alarm[1][4]-0x30)*10) + (alarm[1][5]-0x30); 
        alarm_min2 = ((alarm[1][6]-0x30)*10) + (alarm[1][7]-0x30); 
        alarm_sec2 = ((alarm[1][8]-0x30)*10) + (alarm[1][8]-0x30);
        
        alarm_month3 = ((alarm[2][0]-0x30)*10) + (alarm[2][1]-0x30);
        alarm_day3 = ((alarm[2][2]-0x30)*10) + (alarm[2][3]-0x30);
        alarm_hour3 = ((alarm[2][4]-0x30)*10) + (alarm[2][5]-0x30); 
        alarm_min3 = ((alarm[2][6]-0x30)*10) + (alarm[2][7]-0x30); 
        alarm_sec3 = ((alarm[2][8]-0x30)*10) + (alarm[2][8]-0x30);                  
    }
            
}



void main(void)                        
{     
    Init_timer();         //타이머함수 
    LCD_Init();          //LCD초기화 
    delay_ms(50);                         
    Init();
    
    mode = sec = min = 0;   //초기 화면 출력에 쓰임
    year = 2019; 
    month = 06;
    day = 18;
    hour = 12;

    dir = 0;
    
    LCD_Pos(0,1);
    LCD_Str(first);
    LCD_Pos(1,1);
    LCD_Str(second);
    delay_ms(50);

    while(1)                 
    {                         
            key_Num = KeyScan();        //키 받고 
            mode = key_Num;             
     
            if(mode == 4)         //m1이 눌리면 현재시간 설정 함수로 넘어감.
            {
                timer_flag = 1;        //timer_flag는 1 -> 타이머 멈춤 
                LCD_Clear();
                delay_ms(10);                 
                LCD_Pos(0,1);
                LCD_Str(str);        //시간 세팅화면 출력 
                delay_ms(2000);
                LCD_Clear();
                delay_ms(10);
                LCD_Str(str2);      // 입력~! 출력 
                delay_ms(2000);
                LCD_Clear();
                delay_ms(10);
                mode = 0;          //mode는 다시 0
                time_set();      //시간설정 함수로 이동 
            }
            if(mode == 8)         //m2이 눌리면 알람 설정 함수로 넘어감.  
            {
                LCD_Clear();
                delay_ms(10);
                LCD_Str(str3);      // 알람세팅모드 화면 출력 
                delay_ms(2000);
                LCD_Clear();
                LCD_Str(str4);    // 알람 입력 출력 
                delay_ms(2000);
                LCD_Clear();
                delay_ms(10);
                mode = 0;        //mode는 다시 0
                alarm_set();     //알람 설정 함수로 이동      
            }
            
            else if(mode == 0)   //m3( am - pm) 변환하기위해 m3모드 채터링 방지 코드 
            {
                flag_chattering = 0;
            }
            else
            {
                if(!flag_chattering)  //flag_chattering이 1이아니면 
                {
                    flag_chattering = 1;  //flag_chattering을 1로 하고                   
                    if(mode == 12)   // mode 가 12면 
                    {
                        dir = ~dir;   //dir반전      
                    }
                }   
            } 
            LCD_Pos(0,5);
            LCD_Char('-');
            delay_ms(50);          
        
            LCD_Pos(0,8);
            LCD_Char('-');
            delay_ms(50);
        
            LCD_Pos(1,6);
            LCD_Char(':');
            delay_ms(50);
        
            LCD_Pos(1,9);
            LCD_Char(':');
            delay_ms(50);
            
            if(dir == 1)      //m3가 눌릴때마다 dir 값이 반전됨 (am->pm->am->pm...)
            { 
                if(hour <= 12)   //12시 전엔 pm으로 바꾸고 시간에 12를 더함 (24시로 표시)
                {   
                    LCD_Pos(1,1); // LCD 위치 2, 라인 2지정 
                    LCD_Str("  ");   //ex) am 10시 -> pm 22시 -> LCD에는 pm은 뜨지않음 
                    LCD_Pos(1,4);   //LCD위치 5, 라인 2지정 
                    LCD_Char(((hour+12)/10)+'0');
                    LCD_Char(((hour+12)%10)+'0');
                }
                else if(hour > 12)   // 12시 이후면 
                {
                    LCD_Pos(1,1);   //LCD위치 2, 라인 2지정 
                    LCD_Str(AM);    //AM출력 
                    LCD_Pos(1,4);   //LCD위치 5, 라인 2지정 
                    LCD_Char(((hour-12)/10)+'0');
                    LCD_Char(((hour-12)%10)+'0');                
                }
            }
        
            else if(dir == 0)
            {
                if(hour > 12) //시간이 12시 이후면 ex)14시   (pm / am표시)
                { //LCD표시가 "  14:..." 으로 되어있으니 14-12 = 2시 -> " PM 02:..."   
                    LCD_Pos(1,1);
                    LCD_Str(PM); //PM출력 
                    LCD_Pos(1,4);
                    LCD_Char(((hour-12)/10)+'0'); //14-12 = 2시 
                    LCD_Char(((hour-12)%10)+'0');
                }
                else  //시간이 12시 이전이면 ex) 10시 
                {
                    LCD_Pos(1,1);
                    LCD_Str(AM); //AM출력 
                    LCD_Pos(1,4);
                    LCD_Char((hour/10)+'0');
                    LCD_Char((hour%10)+'0');
                }
            }
            else;
        
            LCD_Pos(0,1);    // 년 달 일 시 분 초 표현하기 
            LCD_Char((year/1000)+'0');
            LCD_Char(((year%1000)-(year%100))/100+'0');
            LCD_Char(((year%100)-(year%10))/10+'0');
            LCD_Char((year%10)+'0');  
            
            LCD_Pos(0,6);
            LCD_Char(month/10+'0');
            LCD_Char(month%10+'0');
            
            LCD_Pos(0,9);
            LCD_Char(day/10+'0');
            LCD_Char(day%10+'0');
        
            LCD_Pos(1,7);
            LCD_Char((min/10)+'0');
            LCD_Char((min%10)+'0');
            LCD_Pos(1,10);
            LCD_Char((sec/10)+'0');
            LCD_Char((sec%10)+'0');
            delay_ms(50); 
            
            if((alarm_month1 == month) && (alarm_day1 == day) && (alarm_hour1 == hour) && (alarm_min1 == min))// && (alarm_sec1 == sec))
            {   //첫번째 알람설정한 것과 지금의 달 일 시 분이  같다면 
                alarm_month1 = alarm_day1 = alarm_hour1 = alarm_min1 = 0; //설정한 알람 초기화 
                LCD_Clear();
                buzzer_flag = 1; //buzzer_flag = 1
                while(buzzer_flag == 1) //buzzer_flag가 1이라면 
                {
                    LCD_Pos(0,0);
                    LCD_Str("alarm!!  alarm!!"); // LCD출력 
                    LCD_Pos(1,0);
                    LCD_Str("press  PIND.0!!");  //LCD출력 -> PIND.0인터럽트 발생시 buzzer_flag = 0 알람 멈춤 
                    delay_ms(10);
                    
                    SSound(Do);  //알람음 출력 
                    SSound(Mi);
                }
            }    
            
            if((alarm_month2 == month) && (alarm_day2 == day) && (alarm_hour2 == hour) && (alarm_min2 == min))
            {       // 두번째 알람 설정한 것과 지금의 달 일 시 분이 같다면 
                alarm_month2 = alarm_day2 = alarm_hour2 = alarm_min2 = 0;  // 알람설정 초기화 
                buzzer_flag = 1;//buzzer_flag = 1
                while(buzzer_flag == 1) //buzzer_flag가 1이라면
                {   
                    LCD_Pos(0,0);
                    LCD_Str("alarm!!--alarm!!"); //LCD출력 
                    LCD_Pos(1,0);
                    LCD_Str("press  PIND.0!!"); //LCD출력 -> PIND.0인터럽트 발생시 buzzer_flag = 0 알람 멈춤
                    delay_ms(10);
                    
                    SSound(Do);  //알람음 출력 
                    SSound(Mi);
                    SSound(Ra);
                }
            }
            if((alarm_month3 == month) && (alarm_day3 == day) && (alarm_hour3 == hour) && (alarm_min3 == min))
            {     // 세번째 알람 설정한 것과 지금의 달 일 시 분이 같다면 
                alarm_month3 = alarm_day3 = alarm_hour3 = alarm_min3 = 0;  //알람설정 초기화 
                buzzer_flag = 1;//buzzer_flag = 1
                while(buzzer_flag == 1)//buzzer_flag가 1이라면
                {   
                    LCD_Pos(0,0);
                    LCD_Str("alarm!!--alarm!!"); //LCD출력 
                    LCD_Pos(1,0);
                    LCD_Str("press  PIND.0!!");  //LCD출력 -> PIND.0인터럽트 발생시 buzzer_flag = 0 알람 멈춤
                    delay_ms(10);
                    
                    SSound(Do);//알람음 출력 
                    SSound(Mi);
                    SSound(Ra);
                    SSound(Si);
                }
            }
    }                                      
}